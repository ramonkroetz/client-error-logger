name: Lint, Test, and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Node.js Version with NVM
        run: |
          nvm install
          nvm use
        shell: bash -l {0}

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: |
          npm run lint
      
      - name: Run Tests
        run: npm test
  
  major:
    needs: check
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Node.js Version with NVM
        run: |
          nvm install
          nvm use
        shell: bash -l {0}

      - name: Install Dependencies
        run: npm install

    

  # release:
  #   if: github.event_name == 'workflow_dispatch'
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Git config
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"

  #     - name: Get Latest Tag
  #       id: get_latest
  #       run: |
  #         TAG=$(git tag --sort=-version:refname | head -n 1)
  #         echo "Found tag: ${TAG}"
  #         if [ -z "${TAG}" ]; then
  #           TAG="v0.0.0"
  #           echo "No tag found. Using default ${TAG}"
  #         fi
  #         echo "LATEST_TAG=${TAG}" >> $GITHUB_ENV

  #     - name: Calculate New Version
  #       id: calc_version
  #       run: |
  #         RELEASE_TYPE="${{ github.event.inputs.release_type }}"
  #         echo "Release type chosen: ${RELEASE_TYPE}"
  #         CUR_VER=${LATEST_TAG#v}
  #         IFS='.' read -r MAJOR MINOR PATCH <<< "$CUR_VER"
  #         if [ "${RELEASE_TYPE}" = "major" ]; then
  #           NEW_MAJOR=$((MAJOR + 1))
  #           NEW_MINOR=0
  #           NEW_PATCH=0
  #         elif [ "${RELEASE_TYPE}" = "minor" ]; then
  #           NEW_MAJOR=$MAJOR
  #           NEW_MINOR=$((MINOR + 1))
  #           NEW_PATCH=0
  #         else
  #           NEW_MAJOR=$MAJOR
  #           NEW_MINOR=$MINOR
  #           NEW_PATCH=$((PATCH + 1))
  #         fi
  #         NEW_TAG="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
  #         echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

  #     - name: Create Git Tag
  #       id: create_tag
  #       run: |
  #         git tag ${{ steps.calc_version.outputs.new_tag }}
  #         git push origin ${{ steps.calc_version.outputs.new_tag }}

  #     - name: Create GitHub Release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ steps.calc_version.outputs.new_tag }}
  #         release_name: "[${{ github.event.inputs.release_type }}] Release ${{ steps.calc_version.outputs.new_tag }}"
  #         draft: true
  #         prerelease: true
