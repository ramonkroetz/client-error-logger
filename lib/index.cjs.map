{"version":3,"sources":["../src/index.ts","../src/helpers.ts"],"sourcesContent":["import axios from 'axios'\n\nimport { collectInfo, getConfig, setConfig } from './helpers'\nimport type { LoggerConfig } from './types'\n\n/** Configure logger instance */\nexport function configure(newConfig: Partial<LoggerConfig>) {\n  const config = getConfig()\n  setConfig({ ...config, ...newConfig })\n}\n\n/** Log error passing a given error type and info object */\nexport async function logError(errorType: string, extraInfo?: object) {\n  const config = getConfig()\n\n  if (config.disable) {\n    return\n  }\n\n  const info = await collectInfo(errorType, extraInfo)\n\n  if (config.debug) {\n    console.log(\n      `%c client-error-logger %c ${info.errorType} `,\n      'background: #db3534; color: white;',\n      'background: lightgrey; color: #333;',\n      'Endpoint called with parameters:',\n      info,\n    )\n    return\n  }\n\n  if (!config.logEndpoint) {\n    return console.error('Logger endpoint not configured')\n  }\n\n  await axios.post(config.logEndpoint, {\n    data: info,\n  })\n}\n","import Bowser from 'bowser'\r\n\r\nimport type { LoggerConfig } from './types'\r\nimport Fingerprint from '@fingerprintjs/fingerprintjs'\r\n\r\nexport type LogInfo = {\r\n  errorType: string\r\n  url: string\r\n  language: string\r\n  allLanguages: string[]\r\n  browserInfo: Bowser.Parser.ParsedResult\r\n  deviceDimensions: string\r\n  browserId: string\r\n  localTime: string\r\n  userPreferences: {\r\n    reducedData: boolean\r\n    reducedMotion: boolean\r\n    darkColorScheme: boolean\r\n    lightColorScheme: boolean\r\n    moreContrast: boolean\r\n  }\r\n  extraInfo: {\r\n    [key: string]: unknown\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    logConfig: LoggerConfig\r\n  }\r\n}\r\n\r\nconst LOGGER_DEFAULT_CONFIG: LoggerConfig = {\r\n  debug: false,\r\n  disable: false,\r\n  logEndpoint: '',\r\n  staticInfo: {},\r\n}\r\n\r\nlet config = LOGGER_DEFAULT_CONFIG\r\n\r\nexport function getConfig() {\r\n  return config\r\n}\r\n\r\nexport function setConfig(newConfig: LoggerConfig) {\r\n  config = newConfig\r\n}\r\n\r\nexport function resetConfig() {\r\n  return setConfig(LOGGER_DEFAULT_CONFIG)\r\n}\r\n\r\nasync function getBrowserId() {\r\n  const fpPromise = await Fingerprint.load()\r\n  const result = await fpPromise.get()\r\n  return result.visitorId\r\n}\r\n\r\nexport async function collectInfo(errorType: string, extraInfo?: object): Promise<LogInfo> {\r\n  const url = window.location.href\r\n\r\n  const { language } = navigator\r\n  const allLanguages = [...navigator.languages]\r\n  const browserInfo = Bowser.parse(navigator.userAgent)\r\n  const deviceDimensions = `${window.innerWidth}x${window.innerHeight}`\r\n  const browserId = await getBrowserId()\r\n  const localTime = new Date().toString()\r\n  const userPreferences = {\r\n    reducedData: matchMedia('(prefers-reduced-data: reduce)').matches,\r\n    reducedMotion: matchMedia('(prefers-reduced-motion: reduce)').matches,\r\n    darkColorScheme: matchMedia('(prefers-color-scheme: dark)').matches,\r\n    lightColorScheme: matchMedia('(prefers-color-scheme: light)').matches,\r\n    moreContrast: matchMedia('(prefers-contrast: more)').matches,\r\n  }\r\n\r\n  return {\r\n    errorType,\r\n    url,\r\n    language,\r\n    allLanguages,\r\n    browserInfo,\r\n    deviceDimensions,\r\n    browserId,\r\n    localTime,\r\n    userPreferences,\r\n    extraInfo: {\r\n      ...config.staticInfo,\r\n      ...extraInfo,\r\n    },\r\n  }\r\n}\r\n"],"mappings":"shCAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,eAAAE,EAAA,aAAAC,IAAA,eAAAC,EAAAJ,GAAA,IAAAK,EAAkB,sBCAlB,IAAAC,EAAmB,uBAGnBC,EAAwB,6CA6BxB,IAAMC,EAAsC,CAC1C,MAAO,GACP,QAAS,GACT,YAAa,GACb,WAAY,CAAC,CACf,EAEIC,EAASD,EAEN,SAASE,GAAY,CAC1B,OAAOD,CACT,CAEO,SAASE,EAAUC,EAAyB,CACjDH,EAASG,CACX,CAMA,SAAeC,GAAe,QAAAC,EAAA,sBAG5B,OADe,MADG,MAAM,EAAAC,QAAY,KAAK,GACV,IAAI,GACrB,SAChB,GAEA,SAAsBC,EAAYC,EAAmBC,EAAsC,QAAAJ,EAAA,sBACzF,IAAMK,EAAM,OAAO,SAAS,KAEtB,CAAE,SAAAC,CAAS,EAAI,UACfC,EAAe,CAAC,GAAG,UAAU,SAAS,EACtCC,EAAc,EAAAC,QAAO,MAAM,UAAU,SAAS,EAC9CC,EAAmB,GAAG,OAAO,UAAU,IAAI,OAAO,WAAW,GAC7DC,EAAY,MAAMZ,EAAa,EAC/Ba,EAAY,IAAI,KAAK,EAAE,SAAS,EAChCC,EAAkB,CACtB,YAAa,WAAW,gCAAgC,EAAE,QAC1D,cAAe,WAAW,kCAAkC,EAAE,QAC9D,gBAAiB,WAAW,8BAA8B,EAAE,QAC5D,iBAAkB,WAAW,+BAA+B,EAAE,QAC9D,aAAc,WAAW,0BAA0B,EAAE,OACvD,EAEA,MAAO,CACL,UAAAV,EACA,IAAAE,EACA,SAAAC,EACA,aAAAC,EACA,YAAAC,EACA,iBAAAE,EACA,UAAAC,EACA,UAAAC,EACA,gBAAAC,EACA,UAAWC,IAAA,GACNC,EAAO,YACPX,EAEP,CACF,GDrFO,SAASY,EAAUC,EAAkC,CAC1D,IAAMC,EAASC,EAAU,EACzBC,EAAUC,IAAA,GAAKH,GAAWD,EAAW,CACvC,CAGA,SAAsBK,EAASC,EAAmBC,EAAoB,QAAAC,EAAA,sBACpE,IAAMP,EAASC,EAAU,EAEzB,GAAID,EAAO,QACT,OAGF,IAAMQ,EAAO,MAAMC,EAAYJ,EAAWC,CAAS,EAEnD,GAAIN,EAAO,MAAO,CAChB,QAAQ,IACN,6BAA6BQ,EAAK,SAAS,IAC3C,qCACA,sCACA,mCACAA,CACF,EACA,MACF,CAEA,GAAI,CAACR,EAAO,YACV,OAAO,QAAQ,MAAM,gCAAgC,EAGvD,MAAM,EAAAU,QAAM,KAAKV,EAAO,YAAa,CACnC,KAAMQ,CACR,CAAC,CACH","names":["src_exports","__export","configure","logError","__toCommonJS","import_axios","import_bowser","import_fingerprintjs","LOGGER_DEFAULT_CONFIG","config","getConfig","setConfig","newConfig","getBrowserId","__async","Fingerprint","collectInfo","errorType","extraInfo","url","language","allLanguages","browserInfo","Bowser","deviceDimensions","browserId","localTime","userPreferences","__spreadValues","config","configure","newConfig","config","getConfig","setConfig","__spreadValues","logError","errorType","extraInfo","__async","info","collectInfo","axios"]}